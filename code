<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Manager</title>
    <style>
        /* Add your styles here */
        body {
            font-family: 'Arial', sans-serif;
            background-color: #ffe6e6; /* Light red background color */
            color: #ff0000; /* Red text color */
            margin: 0;
            padding: 0;
        }

        .sectionHeader {
            background-color: #333; /* Dark background color for section header */
            color: white;
            text-align: center;
            padding: 14px;
            cursor: pointer;
        }

        .sectionContent {
            display: block; /* Show the content by default */
            padding: 20px;
        }

        h1 {
            color: #ff0000; /* Red color for the title */
            text-align: center; /* Center the text */
            margin-top: 50px; /* Add some top margin for spacing */
        }

        .categoryHeading {
            margin-top: 5px;
            margin-bottom: 5px;
        }
    </style>
</head>
<body>
    <h1>Valve 2.0</h1>

    <div class="sectionHeader" onclick="toggleSection('addTaskSection')">Add Task</div>
    <div id="addTaskSection" class="sectionContent">
        <h2>Add Task</h2>
        <!-- Your "Add Task" content goes here -->
        <label for="startDateTime">Start Date and Time:</label>
        <input type="datetime-local" id="startDateTime" value="" required>
        <br>

        <label for="endDateTime">End Date and Time:</label>
        <input type="datetime-local" id="endDateTime" value="" required>
        <br>

        <label for="taskName">Task Name:</label>
        <input type="text" id="taskName" value="" required>
        <br>

        <label for="category">Category:</label>
        <input type="text" id="category" value="" required>
        <br>

        <label for="recurrence">Recurrence:</label>
        <select id="recurrence">
            <option value="none">None</option>
            <option value="daily">Daily</option>
            <option value="weekly">Weekly</option>
            <option value="monthly">Monthly</option>
            <option value="yearly">Yearly</option>
        </select>

        <button onclick="addTask()">Add Task</button>
    </div>

    <div class="sectionHeader" onclick="toggleSection('allTasksSection')">All Tasks</div>
    <div id="allTasksSection" class="sectionContent">
        <!-- Your "All Tasks" content goes here -->
        <ul id="taskList"></ul>
    </div>

    <script>
        var endDateHeading;  // Declare endDateHeading as a global variable

        function toggleSection(sectionId) {
            var sectionContent = document.getElementById(sectionId);
            sectionContent.style.display = (sectionContent.style.display === 'none' || sectionContent.style.display === '') ? 'block' : 'none';
        }

        // Function to set default start date and end date to today
        function setDefaultDates() {
            var today = new Date().toISOString().slice(0, 16);  // Format: "YYYY-MM-DDTHH:mm"
            document.getElementById('startDateTime').value = today;
            document.getElementById('endDateTime').value = today;
        }

        // Call the function when the page loads
        window.onload = setDefaultDates;

        var taskIdCounter = 0;  // Counter for unique task IDs
        var taskList = document.getElementById('taskList'); // Moved the taskList variable outside the addTask function

        // Function to add a task
        function addTask() {
            // Get input values
            var startDateTime = document.getElementById('startDateTime').value;
            var endDateTime = document.getElementById('endDateTime').value;
            var taskName = document.getElementById('taskName').value;
            var category = document.getElementById('category').value;
            var recurrence = document.getElementById('recurrence').value;

            // Validate input values
            if (!startDateTime || !endDateTime || !taskName || !category) {
                alert('Please fill in all fields.');
                return;
            }

            // Create task object
            var task = {
                taskId: taskIdCounter++,
                startDateTime: startDateTime,
                endDateTime: endDateTime,
                taskName: taskName,
                category: category,
                recurrence: recurrence
            };

            // Check if end date heading already exists
            endDateHeading = taskList.querySelector(`h3[data-enddate="${endDateTime.split('T')[0]}"]`);
            if (!endDateHeading) {
                endDateHeading = document.createElement('h3');
                endDateHeading.setAttribute('data-enddate', endDateTime.split('T')[0]);
                endDateHeading.textContent = `${endDateTime.split('T')[0]}`;
                taskList.appendChild(endDateHeading);

                // Create an unordered list for categories under the end date heading
                var categoryList = document.createElement('ul');
                endDateHeading.appendChild(categoryList);
            }

            // Check if category heading already exists
            var categoryHeading = getCategoryHeading(endDateHeading, category);
            if (!categoryHeading) {
                categoryHeading = document.createElement('li');
                categoryHeading.setAttribute('data-category', category);
                categoryHeading.textContent = `${category}`;
                endDateHeading.lastChild.appendChild(categoryHeading);

                // Create an unordered list for tasks under the category heading
                var taskItemList = document.createElement('ul');
                categoryHeading.appendChild(taskItemList);
            }

            var taskItem = document.createElement('li');
            taskItem.id = `task_${task.taskId}`;
            taskItem.innerHTML = `
                ${task.taskName} - 
                <span class="countdown" data-endtime="${task.endDateTime}"></span>
                <button class="complete-button">Complete</button>
            `;
            categoryHeading.lastChild.appendChild(taskItem);

            // Reset input fields and set default dates
            setDefaultDates();
            document.getElementById('taskName').value = '';
            document.getElementById('category').value = '';
            document.getElementById('recurrence').value = 'none';

            // Update countdown timers
            updateCountdowns();
        }

        // Function to get or create a category heading
        function getCategoryHeading(endDateHeading, category) {
            return Array.from(endDateHeading.lastChild.children).find(item => item.getAttribute('data-category') === category);
        }

        // Event listener for task completion
        taskList.addEventListener('click', function (event) {
            if (event.target.classList.contains('complete-button')) {
                var taskItem = event.target.closest('li');
                var categoryId = taskItem.closest('li[data-category]').getAttribute('data-category');
                var endDate = taskItem.closest('h3[data-enddate]').getAttribute('data-enddate');
                taskItem.parentNode.removeChild(taskItem);

                // Check if the category is now empty and remove the heading
                var endDateHeading = taskList.querySelector(`h3[data-enddate="${endDate}"]`);
                var categoryList = endDateHeading.querySelector(`li[data-category="${categoryId}"] ul`);
                if (!categoryList || categoryList.children.length === 0) {
                    var categoryHeading = endDateHeading.querySelector(`li[data-category="${categoryId}"]`);
                    if (categoryHeading) {
                        categoryHeading.remove();
                    }
                }

                // Check if all categories are empty and remove the end date heading
                var allCategoryLists = endDateHeading.querySelectorAll('ul');
                var isEmpty = Array.from(allCategoryLists).every(list => list.children.length === 0);

                if (isEmpty) {
                    endDateHeading.remove();
                }

                // Update countdown timers
                updateCountdowns();
            }
        });

        // Function to update countdown timers and color tasks
        function updateCountdowns() {
            var now = new Date().getTime();
            var taskItems = document.querySelectorAll('.countdown');

            taskItems.forEach(taskItem => {
                var endTime = new Date(taskItem.dataset.endtime).getTime();
                var distance = endTime - now;

                var days = Math.floor(distance / (1000 * 60 * 60 * 24));
                var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                var seconds = Math.floor((distance % (1000 * 60)) / 1000);

                taskItem.innerHTML = `${days}d ${hours}h ${minutes}m ${seconds}s`;

                // Change color if past the end date
                if (distance < 0) {
                    taskItem.innerHTML = 'DEADLINE PASSED';
                    taskItem.parentNode.style.color = 'red';
                } else {
                    taskItem.parentNode.style.color = ''; // Reset color
                }
            });
        }

        // Update countdowns every second
        setInterval(updateCountdowns, 1000);
    </script>
</body>
</html>
